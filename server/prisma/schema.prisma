// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Comment {
  id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(name: "CommentToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(name: "CommentToPost", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  children  Comment[] @relation(name: "ParentChild")
  parent    Comment?  @relation(name: "ParentChild", fields: [parentId], references: [id])
  parentId  String?
  like      Like[]    @relation(name: "LikeToComment")

  @@map("comment")
}

model User {
  id        String    @id @default(uuid())
  comments  Comment[] @relation(name: "CommentToUser")
  post      Post[]    @relation(name: "PostToUser")
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  like      Like[]    @relation(name: "LikeToUser")

  @@map("user")
}

model Post {
  id        String    @id @default(uuid())
  comments  Comment[] @relation(name: "CommentToPost")
  title     String
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(name: "PostToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  like      Like[]    @relation(name: "LikeToPost")

  @@map("post")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(name: "LikeToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment? @relation(name: "LikeToComment", fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  post      Post?    @relation(name: "LikeToPost", fields: [postId], references: [id], onDelete: Cascade)
  postId    String?

  @@map("like")
}
